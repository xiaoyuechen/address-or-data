* Discoveries
  - Many memory addresses are stored in memory. Especially in OOP.
  - We can mark out _where_ and _what_ a program leaks.

* Ideas and plans
  - Rewrite the tool s.t. it depends only on free software
  - Build the tool as a suite for security testing, we need:
    - A way to mark out /secret watch region/
    - A tracking mode that tracks only the /secret watch region/. It
      would run way faster. Possibly usable at real-time?
    - A more flexible way of plotting
    - Accept user-defined functions to recover secrets
    - Dumping data in a better way. Reduce redundancy. Maybe using
      relational tables?
    - Make it easy to use
    - Write a manual
    - Propagating into memory
    - Multi-processing support

* Questions
  - Which of the three options for the stack addresses?
    - [X] Treat stack memory exactly the same
    - Do not track stack memory entirely
    - Use special data structure to track stack memory
  - What to do with calls such as ~free~? \\
    For now, we do not care. Use the lazy approach.

* Program
** DONE DIFT algorithm design
   - State "DONE"       from "TODO"       [2022-02-02 Wed 11:17]
   Inspirations from these paper
   - [[file:literature/2007.raksha.isca.pdf][Raksha: A Flexible Information Flow Architecture for Software Security]]
   - [[file:literature/clause.li.orso.ISSTA07.pdf][Dytan: A Generic Dynamic Taint Analysis Framework]]

** TODO Implementation
   Have a DIFT program that can mark out memory that contains memory
   addresses. For example, the address ~&b[i]~ should be marked when
   it is used in ~a[b[i]]~.
   - [X] Instrument one function ::
   - [-] Store tuples :: ~<pc_ld, pc_use, addr>~
   - [X] Instrument the entire program ::
   - [-] Multi-theaded program support :: Optional, lower priority
   - [ ] Propagate to memory ::
   - [ ] Control flow marking ::

** TODO Test the program
   - [ ] Unit tests :: Write some unit tests to ensure individual
     functions work as intended
   - [ ] Integration tests :: Write some small assembly snippets to
     ensure the program works as intended
   - [ ] Real program tests :: Use real programs as input to test if
     the DIFT program gives reasonable outputs

* Report
** TODO Abstract
** TODO Introduction
** TODO Background
** TODO Methods
** TODO Results
** TODO Discussion and conclusion
